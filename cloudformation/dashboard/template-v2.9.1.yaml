AWSTemplateFormatVersion: "2010-09-09"
Description: CloudWatch Dashboard for RunsOn stack monitoring

Parameters:
  LogGroupName:
    Type: String
    Description: Log group name from the parent stack
    
  DashboardName:
    Type: String
    Description: Name for the CloudWatch dashboard
    Default: RunsOn-Operations-Dashboard
    
  QueueName:
    Type: String
    Description: Name of the SQS queue to monitor

Resources:
  RunsOnDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Ref DashboardName
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "ApproximateNumberOfMessagesVisible", "QueueName", "${QueueName}" ]
                ],
                "period": 300,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Jobs Currently Queued",
                "view": "timeSeries"
              }
            },
            {
              "type": "log",
              "x": 6,
              "y": 0,
              "width": 6,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter message like /ðŸŽ‰ Runner scheduled successfully/\n| stats count() as RunnersScheduled",
                "region": "${AWS::Region}",
                "title": "Total Runners Scheduled (Current Period)",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 0,
              "width": 6,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp\n| filter message like /ðŸŽ‰ Runner scheduled successfully/\n| stats count() as RunnersScheduled by bin(5m) as t\n| sort t asc",
                "region": "${AWS::Region}",
                "title": "Runners Scheduled over time (5min intervals)",
                "view": "timeSeries"
              }
            },
            {
              "type": "log",
              "x": 18,
              "y": 0,
              "width": 6,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter metric_type = \"job_event\" and ispresent(overall_queue_duration_seconds)\n| | stats pct(internal_queue_duration_seconds, 90) as internal_P90, pct(internal_queue_duration_seconds, 50) as internal_P50, pct(overall_queue_duration_seconds, 90) as overall_P90, pct(overall_queue_duration_seconds, 50) as overall_P50 by bin(1m) as t\n| sort t asc",
                "region": "${AWS::Region}",
                "title": "Internal/Overall Queue Duration Percentiles (P50/P90)",
                "view": "timeSeries",
                "yAxis": {
                  "left": {
                    "min": 0,
                    "label": "Seconds"
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter message like /Finalizing runner/\n| stats count() as Count by job_conclusion\n| sort Count desc",
                "region": "${AWS::Region}",
                "title": "Completed Jobs by Conclusion",
                "view": "stackedArea"
              }
            },
            {
              "type": "log",
              "x": 8,
              "y": 6,
              "width": 4,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter metric_type = \"snapshot\"\n| fields @timestamp, rate_limiters.ec2_read.tokens as tokens, rate_limiters.ec2_read.burst as burst\n| stats avg(tokens) as avg_tokens, avg(burst) as avg_burst by bin(5m) as t\n| sort t asc",
                "region": "${AWS::Region}",
                "title": "EC2 Read",
                "view": "timeSeries",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 6,
              "width": 4,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter metric_type = \"snapshot\"\n| fields @timestamp, rate_limiters.ec2_run.tokens as tokens, rate_limiters.ec2_run.burst as burst\n| stats avg(tokens) as avg_tokens, avg(burst) as avg_burst by bin(5m) as t\n| sort t asc",
                "region": "${AWS::Region}",
                "title": "EC2 Run",
                "view": "timeSeries",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 16,
              "y": 6,
              "width": 4,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter metric_type = \"snapshot\"\n| fields @timestamp, rate_limiters.ec2_terminate.tokens as tokens, rate_limiters.ec2_terminate.burst as burst\n| stats avg(tokens) as avg_tokens, avg(burst) as avg_burst by bin(5m) as t\n| sort t asc",
                "region": "${AWS::Region}",
                "title": "EC2 Terminate",
                "view": "timeSeries",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 20,
              "y": 6,
              "width": 4,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter metric_type = \"snapshot\"\n| fields @timestamp, rate_limiters.ec2_mutating.tokens as tokens, rate_limiters.ec2_mutating.burst as burst\n| stats avg(tokens) as avg_tokens, avg(burst) as avg_burst by bin(5m) as t\n| sort t asc",
                "region": "${AWS::Region}",
                "title": "EC2 Mutating",
                "view": "timeSeries",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 12,
              "width": 4,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter metric_type = \"snapshot\"\n| fields @timestamp, rate_limiters.s3.tokens as tokens, rate_limiters.s3.burst as burst\n| stats avg(tokens) as avg_tokens, avg(burst) as avg_burst by bin(5m) as t\n| sort t asc",
                "region": "${AWS::Region}",
                "title": "S3 API",
                "view": "timeSeries",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 4,
              "y": 12,
              "width": 4,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter metric_type = \"snapshot\"\n| fields @timestamp, rate_limiters.github.tokens as tokens, rate_limiters.github.burst as burst\n| stats avg(tokens) as avg_tokens, avg(burst) as avg_burst by bin(5m) as t\n| sort t asc",
                "region": "${AWS::Region}",
                "title": "GitHub API",
                "view": "timeSeries",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 8,
              "y": 12,
              "width": 16,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter level = \"error\"\n| fields @timestamp, message\n| sort @timestamp desc\n| limit 50",
                "region": "${AWS::Region}",
                "title": "Recent Error Messages (Latest 50)",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 18,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter metric_type = \"snapshot\"\n| stats min(jobs.queued) as queued, min(jobs.scheduled) as scheduled, min(jobs.in_progress) as in_progress, min(jobs.completed) as completed by bin(1m) as t\n| sort t asc",
                "region": "${AWS::Region}",
                "title": "Job Status Summary",
                "view": "timeSeries"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 18,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter metric_type = \"snapshot\" and ispresent(pools.0.dangling)\n| parse @message /\\[(?<pool_data>.*)\\]/\n| parse pool_data /\"pool_name\":\"(?<pool_name>[^\"]+)\"/\n| parse pool_data /\"hot\":(?<hot>\\d+)/\n| parse pool_data /\"stopped\":(?<stopped>\\d+)/\n| parse pool_data /\"warming\":(?<warming>\\d+)/\n| parse pool_data /\"ready\":(?<ready>\\d+)/\n| parse pool_data /\"ready_to_stop\":(?<ready_to_stop>\\d+)/\n| parse pool_data /\"detached\":(?<detached>\\d+)/\n| parse pool_data /\"error\":(?<error>\\d+)/\n| parse pool_data /\"outdated\":(?<outdated>\\d+)/\n| parse pool_data /\"dangling\":(?<dangling>\\d+)/\n| stats max(hot) as max_hot, max(stopped) as max_stopped, max(warming) as max_warming, max(ready) as max_ready, max(ready_to_stop) as max_ready_to_stop, max(detached) as max_detached, max(error) as max_error, max(outdated) as max_outdated, max(dangling) as max_dangling by bin(5m) as t, pool_name\n| sort t desc, pool_name asc",
                "region": "${AWS::Region}",
                "title": "Pool Instances Over Time",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 24,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp, deliveries_redelivered, deliveries_failed, deliveries_scanned, deliveries_ignored\n| filter metric_type = \"webhook_redelivery_summary\" and ispresent(@message)\n| stats sum(deliveries_redelivered) as TotalRedelivered, sum(deliveries_failed) as TotalFailed, sum(deliveries_scanned) as TotalScanned, sum(deliveries_ignored) as TotalIgnored by bin(5m) as t\n| sort t desc",
                "region": "${AWS::Region}",
                "title": "Webhook Redeliveries (Last 24h)",
                "view": "table",
                "stacked": false
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 24,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter metric_type = \"webhook_redelivery_success\" and ispresent(@message)\n| fields @timestamp, delivery_id, event, action, original_status_code\n| sort @timestamp desc\n| limit 20",
                "region": "${AWS::Region}",
                "title": "Recent Webhook Redeliveries",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 30,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter metric_type = \"snapshot\"\n| fields @timestamp, spot_circuit_breaker.active as active, spot_circuit_breaker.interruption_count as interruption_count\n| stats min(active) as circuit_breaker_active, min(interruption_count) as interruptions by bin(1m) as t\n| sort t asc",
                "region": "${AWS::Region}",
                "title": "Spot Circuit Breaker Status",
                "view": "timeSeries"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 30,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter metric_type = \"spot_interruption\"\n| fields @timestamp, interruption_time, trip_count, recovery_minutes, circuit_breaker_active\n| sort @timestamp desc\n| limit 50",
                "region": "${AWS::Region}",
                "title": "Recent Spot Interruptions (Last 50)",
                "view": "table"
              }
            }
          ]
        }

Outputs:
  DashboardURL:
    Description: URL to the CloudWatch Dashboard
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${DashboardName}"
    
  DashboardName:
    Description: Name of the created dashboard
    Value: !Ref DashboardName