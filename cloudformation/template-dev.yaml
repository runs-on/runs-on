AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation stack for https://runs-on.com

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Required Configuration"
        Parameters:
          - GithubOrganization
          - LicenseKey
          - EmailAddress
          - AvailabilityZone
          - SSHCidrRange
      - Label:
          default: "Advanced Configuration"
        Parameters:
          - AppEc2QueueSize
          - AppCPU
          - AppMemory
    ParameterLabels:
      GithubOrganization:
        default: "Your GitHub organization or personal name."

Parameters:
  GithubOrganization:
    Type: String
    Description: "For instance if your GitHub organization lives at https://github.com/my-org, then the value of this parameter should be: my-org"
    MinLength: 1

  LicenseKey:
    Type: String
    Description: "License key. Get one at https://runs-on.com/pricing."
    MinLength: 1

  EmailAddress:
    Type: String
    Description: Email address for cost and alert reports.
    MinLength: 1

  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: "The availability zone where the stack will be created. You can update this at any time, for instance if you find out that some AZ does not have the latest instance types."
    MinLength: 1

  SSHCidrRange:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR range for SSH access. By default, only repository collaborators with push permission will be able to SSH into the runner instances.
    MinLength: 1

  AppEc2QueueSize:
    Type: Number
    Default: "2"
    Description: "Queue size for launching and terminating EC2 instances (default rate limit from AWS: 2/s). Only increase if you have requested a higher limit from AWS."

  AppCPU:
    Type: Number
    Default: "256"
    Description: CPU units for RunsOn service (256 or higher)

  AppMemory:
    Type: Number
    Default: "512"
    Description: Memory in MB for RunsOn service (512 or higher)

Mappings:
  App:
    Image:
      Tag: "v1.7.4-dev"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      # Dynamically generate a CIDR block with non-overlapping IP ranges for each possible AZ in the region
      # https://docs.aws.amazon.com/fr_fr/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html
      CidrBlock: !Select [0, !Cidr [!GetAtt [VPC, CidrBlock], 16, 12]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      # Dynamically generate a CIDR block with non-overlapping IP ranges for each possible AZ in the region
      # https://docs.aws.amazon.com/fr_fr/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html
      CidrBlock: !Select [1, !Cidr [!GetAtt [VPC, CidrBlock], 16, 12]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      # Dynamically generate a CIDR block with non-overlapping IP ranges for each possible AZ in the region
      # https://docs.aws.amazon.com/fr_fr/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html
      CidrBlock: !Select [2, !Cidr [!GetAtt [VPC, CidrBlock], 16, 12]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName:
        Fn::Sub: "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PublicRouteTable

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html
  EC2FleetLaunchTemplateLinuxDefault:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref SecurityGroup
        EbsOptimized: "true"
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 2
          InstanceMetadataTags: enabled
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 40
              VolumeType: gp3
              Throughput: 750
              Iops: 3000
              DeleteOnTermination: true
        InstanceInitiatedShutdownBehavior: "terminate"
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash -ex
              _the_end() {
                echo "Going to shut down in a few seconds..." && sleep 20s && shutdown -h now
              }
              # agent already has watchdogs, but just it doesn't behave properly
              sleep 12h && echo "Full timeout reached." && _the_end &

              if [ ! -f /opt/runs-on/agent ]; then
                trap _the_end EXIT INT TERM
                mkdir -p /opt/runs-on
                time curl -Ls https://runs-on.s3.eu-west-1.amazonaws.com/agent/${AppVersion}/agent-linux-$(uname -i) -o /opt/runs-on/agent
                chmod a+x /opt/runs-on/agent
                /opt/runs-on/agent
              fi
            - AppVersion: !FindInMap [App, Image, Tag]

  EC2FleetLaunchTemplateLinuxLarge:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref SecurityGroup
        EbsOptimized: "true"
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 2
          InstanceMetadataTags: enabled
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 80
              VolumeType: gp3
              Throughput: 1000
              Iops: 4000
              DeleteOnTermination: true
        InstanceInitiatedShutdownBehavior: "terminate"
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash -ex
              _the_end() {
                echo "Going to shut down in a few seconds..." && sleep 20s && shutdown -h now
              }
              # agent already has watchdogs, but just it doesn't behave properly
              sleep 12h && echo "Full timeout reached." && _the_end &

              if [ ! -f /opt/runs-on/agent ]; then
                trap _the_end EXIT INT TERM
                mkdir -p /opt/runs-on
                time curl -Ls https://runs-on.s3.eu-west-1.amazonaws.com/agent/${AppVersion}/agent-linux-$(uname -i) -o /opt/runs-on/agent
                chmod a+x /opt/runs-on/agent
                /opt/runs-on/agent
              fi
            - AppVersion: !FindInMap [App, Image, Tag]

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for SSH access
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - CidrIp:
            Fn::Sub: "${SSHCidrRange}"
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName
        - Key: "runs-on/purpose"
          Value: "config"

  S3BucketCache:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: ExpireRunnerConfig
            Prefix: runners/
            Status: Enabled
            ExpirationInDays: 1
          - Id: ExpireCache
            Prefix: cache/
            Status: Enabled
            ExpirationInDays: 10
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName
        - Key: "runs-on/purpose"
          Value: "cache"

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EC2AccessS3BucketPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                Resource:
                  - !Sub "arn:aws:s3:::${S3BucketCache}"
                  - !Sub "arn:aws:s3:::${S3BucketCache}/cache/*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3BucketCache}/runners/*"
                  - !Join
                    - ""
                    - [
                        !Sub "arn:aws:s3:::${S3BucketCache}/runners/",
                        "${aws:userid}/*",
                      ]
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  RunsOnService:
    Type: AWS::AppRunner::Service
    Properties:
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName
      InstanceConfiguration:
        Cpu: !Ref AppCPU
        Memory: !Ref AppMemory
        InstanceRoleArn: !GetAtt RunsOnServiceRole.Arn
      NetworkConfiguration:
        EgressConfiguration:
          EgressType: DEFAULT
        IngressConfiguration:
          IsPubliclyAccessible: true
        IpAddressType: IPV4
      HealthCheckConfiguration:
        Path: /ping
        Protocol: HTTP
        HealthyThreshold: 1
        UnhealthyThreshold: 10
        Interval: 5
      SourceConfiguration:
        ImageRepository:
          ImageConfiguration:
            Port: 3000
            RuntimeEnvironmentVariables:
              - Name: RUNS_ON_STACK_NAME
                Value: !Ref AWS::StackName
              - Name: RUNS_ON_ORG
                Value: !Ref GithubOrganization
              - Name: RUNS_ON_LICENSE_KEY
                Value: !Ref LicenseKey
              - Name: RUNS_ON_BUCKET_CONFIG
                Value: !Ref S3Bucket
              - Name: RUNS_ON_BUCKET_CACHE
                Value: !Ref S3BucketCache
              - Name: RUNS_ON_SECURITY_GROUP_ID
                Value: !Ref SecurityGroup
              - Name: RUNS_ON_INSTANCE_PROFILE_ARN
                Value: !GetAtt EC2InstanceProfile.Arn
              - Name: RUNS_ON_TOPIC_ARN
                Value: !Ref AlertTopic
              - Name: RUNS_ON_EC2_QUEUE_SIZE
                Value: !Ref AppEc2QueueSize
              - Name: RUNS_ON_LAUNCH_TEMPLATE_LINUX_DEFAULT
                Value: !Ref EC2FleetLaunchTemplateLinuxDefault
              - Name: RUNS_ON_LAUNCH_TEMPLATE_LINUX_LARGE
                Value: !Ref EC2FleetLaunchTemplateLinuxLarge
          ImageIdentifier: !Sub
            - "public.ecr.aws/c5h5o9k1/runs-on/runs-on:${AppVersion}"
            - AppVersion: !FindInMap [App, Image, Tag]
          ImageRepositoryType: ECR_PUBLIC

  RunsOnServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - tasks.apprunner.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AppRunnerEC2Permissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - ce:GetCostAndUsage
                  - ce:UpdateCostAllocationTagsStatus
                  - iam:CreateServiceLinkedRole
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricData
                  - cloudwatch:DescribeAlarms
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: !Ref AWS::StackId
              - Effect: Allow
                Action:
                  - ec2:CreateFleet
                  - ec2:DeleteFleet
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:RunInstances
                Resource:
                  - !Sub "arn:aws:ec2:${AWS::Region}::image/*"
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt EC2InstanceRole.Arn
              - Effect: Allow
                Action:
                  - ec2:TerminateInstances
                Resource: "arn:aws:ec2:*:*:instance/*"
                Condition:
                  StringEquals:
                    "aws:ResourceTag/stack": !Ref AWS::StackName
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - Fn::Sub: arn:aws:s3:::${S3Bucket}
                  - Fn::Sub: arn:aws:s3:::${S3Bucket}/*
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - Fn::Sub: arn:aws:s3:::${S3BucketCache}
                  - Fn::Sub: arn:aws:s3:::${S3BucketCache}/runners/*
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref AlertTopic

  MinutesPerDayAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alerts when the daily usage of the RunsOn service exceeds 6000 minutes
      Namespace: RunsOn
      MetricName: minutes
      Statistic: Sum # Choose the appropriate statistic (e.g., Sum, Average, Maximum)
      Period: 86400 # Set to 24 hours for 1-day periods (adjust as needed)
      EvaluationPeriods: 1
      Threshold: 40
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      OKActions:
        - !Ref AlertTopic

  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName
      DisplayName: RunsOn Alerts

  AlertTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref AlertTopic
      Endpoint: !If [EmailProvided, !Ref EmailAddress, ""]

Conditions:
  EmailProvided: !Not [!Equals [!Ref EmailAddress, ""]]

Outputs:
  RunsOnEntryPoint:
    Description: Entrypoint for the RunsOn service
    Value: !GetAtt RunsOnService.ServiceUrl
  RunsOnService:
    Description: Link to the AppRunner service in AWS console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/apprunner/home?region=${AWS::Region}#/services/dashboard?service_arn=${RunsOnService}"
  RunsOnOrg:
    Description: GitHub organization or personal account
    Value: !Ref GithubOrganization
  RunsOnLicenseKey:
    Description: License key
    Value: !Ref LicenseKey
  RunsOnPublicSubnet1:
    Description: Public subnet 1
    Value: !Ref PublicSubnet1
  RunsOnPublicSubnet2:
    Description: Public subnet 2
    Value: !Ref PublicSubnet2
  RunsOnPublicSubnet3:
    Description: Public subnet 3
    Value: !Ref PublicSubnet3
  RunsOnInstanceProfileArn:
    Description: Runner instance profile ARN
    Value: !GetAtt EC2InstanceProfile.Arn
  RunsOnInstanceProfileName:
    Description: Runner instance profile Name
    Value: !Ref EC2InstanceProfile
  RunsOnInstanceRoleName:
    Description: Runner instance role Name
    Value: !Ref EC2InstanceRole
  RunsOnSecurityGroupId:
    Description: Security group for runners
    Value: !Ref SecurityGroup
  RunsOnBucketConfig:
    Description: S3 bucket for storing configuration
    Value: !Ref S3Bucket
  RunsOnBucketCache:
    Description: S3 bucket for storing cache artefacts
    Value: !Ref S3BucketCache
  RunsOnTopicArn:
    Description: SNS Topic where email alerts and reports are sent
    Value: !Ref AlertTopic
  RunsOnLaunchTemplateLinuxDefault:
    Description: Default Linux launch template for the RunsOn service
    Value: !Ref EC2FleetLaunchTemplateLinuxDefault
  RunsOnLaunchTemplateLinuxLarge:
    Description: Large Linux launch template for the RunsOn service
    Value: !Ref EC2FleetLaunchTemplateLinuxLarge
