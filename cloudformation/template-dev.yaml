AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation stack for https://runs-on.com

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "App configuration [required]"
        Parameters:
          - GithubOrganization
          - LicenseKey
          - EmailAddress
      - Label:
          default: "Security settings [optional]"
        Parameters:
          - Private
          - DefaultAdmins
          - SSHCidrRange
          - EC2InstanceCustomPolicy
      - Label:
          default: "Alert settings [optional]"
        Parameters:
          - AppAlarmDailyMinutes
          - CostReportsEnabled
          - AlertTopicSubscriptionHttpsEndpoint
      - Label:
          default: "Advanced app configuration [optional]"
        Parameters:
          - RunnerDefaultDiskSize
          - RunnerDefaultVolumeThroughput
          - RunnerLargeDiskSize
          - RunnerLargeVolumeThroughput
          - ECInstanceDetailedMonitoring
          - AppEc2QueueSize
          - AppCPU
          - AppMemory
    ParameterLabels:
      GithubOrganization:
        default: "Your GitHub organization or personal name."

Parameters:
  GithubOrganization:
    Type: String
    Description: "For instance if your GitHub organization lives at github.com/my-org, then the value of this parameter should be: my-org"
    MinLength: 1

  LicenseKey:
    Type: String
    Description: "License key. Get one at https://runs-on.com/pricing."
    MinLength: 1

  EmailAddress:
    Type: String
    Description: Email address for cost and alert reports.
    MinLength: 1

  AlertTopicSubscriptionHttpsEndpoint:
    Type: String
    Description: HTTPS endpoint for cost and alert reports.
    Default: ""

  SSHCidrRange:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR range for SSH access (mainly useful when Private=false). By default, only repository collaborators with admin permission will be able to SSH into the runner instances.
    MinLength: 1

  Private:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: "Enable (true) or disable (false) private subnets. Note that enabling will create 3 managed NAT gateways, with the corresponding costs."

  DefaultAdmins:
    Type: String
    Default: ""
    Description: Comma-separated list of GitHub usernames that will always be granted SSH access to all the runner instances (if SSH access is enabled). If blank, only repository collaborators with push permission will be able to SSH into the runner instances.

  AppEc2QueueSize:
    Type: Number
    Default: 2
    MinValue: 1
    Description: "Rate limit for launching instances, per second. New AWS accounts come with a default of 2 RunInstances call/s, so only increase if you have requested a higher limit from AWS."

  AppAlarmDailyMinutes:
    Type: Number
    Default: "4000"
    Description: "Trigger an alarm if the cumulative number of minutes consumed during a day is over that number."

  AppCPU:
    Type: Number
    Default: "256"
    Description: CPU units for RunsOn service (256 or higher). If you have many workflows, you may need to increase this (512, 1024, etc.).

  AppMemory:
    Type: Number
    Default: "512"
    Description: Memory in MB for RunsOn service (512 or higher). If you have many workflows, you may need to increase this (1024, 2048, etc.).

  RunnerDefaultDiskSize:
    Type: Number
    Default: 40
    MinValue: 40
    Description: Disk size in GB for default runners.

  RunnerDefaultVolumeThroughput:
    Type: Number
    Default: 400
    MinValue: 125
    MaxValue: 1000
    Description: Volume throughput in MiB/s for default runners (helps with faster boot times, but costs more).

  RunnerLargeDiskSize:
    Type: Number
    Default: 80
    MinValue: 40
    Description: Disk size in GB for large runners.

  RunnerLargeVolumeThroughput:
    Type: Number
    Default: 750
    MinValue: 125
    MaxValue: 1000
    Description: Volume throughput in MiB/s for large runners (helps with faster boot times, but costs more).

  CostReportsEnabled:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: Enable or disable cost reports sent by email.

  EC2InstanceCustomPolicy:
    Type: String
    Default: ""
    Description: "Optional managed IAM Policy ARN to assign to the EC2 runner instances."

  ECInstanceDetailedMonitoring:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: Enable or disable detailed monitoring for EC2 instances (can incur additional costs).

Mappings:
  App:
    Image:
      Tag: "v2.3.2-dev"

Conditions:
  EmailProvided: !Not [!Equals [!Ref EmailAddress, ""]]
  AlertTopicSubscriptionHttpsProvided:
    !Not [!Equals [!Ref AlertTopicSubscriptionHttpsEndpoint, ""]]
  HasPrivateSubnet: !Equals ["true", !Ref Private]
  CustomPolicyProvided: !Not [!Equals [!Ref EC2InstanceCustomPolicy, ""]]
  ECInstanceDetailedMonitoringEnabled: !Equals ["true", !Ref ECInstanceDetailedMonitoring]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PrivateSubnet3RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PrivateSubnet1Route:
    Condition: HasPrivateSubnet
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PrivateSubnetGateway1

  PrivateSubnet2Route:
    Condition: HasPrivateSubnet
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PrivateSubnetGateway2

  PrivateSubnet3Route:
    Condition: HasPrivateSubnet
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet3RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PrivateSubnetGateway3

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateSubnet1RouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateSubnet2RouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateSubnet3RouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [8, !Cidr [!GetAtt [VPC, CidrBlock], 16, 12]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Select [9, !Cidr [!GetAtt [VPC, CidrBlock], 16, 12]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Select [10, !Cidr [!GetAtt [VPC, CidrBlock], 16, 12]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PrivateSubnetGateway1:
    Condition: HasPrivateSubnet
    DependsOn: ElasticIP1
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [ElasticIP1, AllocationId]
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PrivateSubnetGateway2:
    Condition: HasPrivateSubnet
    DependsOn: ElasticIP2
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [ElasticIP2, AllocationId]
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PrivateSubnetGateway3:
    Condition: HasPrivateSubnet
    DependsOn: ElasticIP3
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [ElasticIP3, AllocationId]
      SubnetId: !Ref PublicSubnet3
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  ElasticIP1:
    Condition: HasPrivateSubnet
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  ElasticIP2:
    Condition: HasPrivateSubnet
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  ElasticIP3:
    Condition: HasPrivateSubnet
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      # Dynamically generate a CIDR block with non-overlapping IP ranges for each possible AZ in the region
      # https://docs.aws.amazon.com/fr_fr/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html
      CidrBlock: !Select [0, !Cidr [!GetAtt [VPC, CidrBlock], 16, 12]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      # Dynamically generate a CIDR block with non-overlapping IP ranges for each possible AZ in the region
      # https://docs.aws.amazon.com/fr_fr/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html
      CidrBlock: !Select [1, !Cidr [!GetAtt [VPC, CidrBlock], 16, 12]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      # Dynamically generate a CIDR block with non-overlapping IP ranges for each possible AZ in the region
      # https://docs.aws.amazon.com/fr_fr/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html
      CidrBlock: !Select [2, !Cidr [!GetAtt [VPC, CidrBlock], 16, 12]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName:
        Fn::Sub: "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateSubnet1RouteTable
        - !Ref PrivateSubnet2RouteTable
        - !Ref PrivateSubnet3RouteTable

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html
  EC2FleetLaunchTemplateLinuxDefault:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref SecurityGroup
        EbsOptimized: "true"
        # Can't set CreditSpecification here, because standard instances would raise e.g.:
        #   InstanceCreditSpecification.NotSupported - The c7a.large instance type does not support T2 Unlimited.
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 2
          InstanceMetadataTags: enabled
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: !Ref RunnerDefaultDiskSize
              VolumeType: gp3
              Throughput: !Ref RunnerDefaultVolumeThroughput
              Iops: 3000
              DeleteOnTermination: true
        InstanceInitiatedShutdownBehavior: "terminate"
        Monitoring:
          !If
            - ECInstanceDetailedMonitoringEnabled
            - Enabled: true
            - Ref: AWS::NoValue
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash -e
              _the_end() {
                echo "Going to shut down in a few seconds..." && sleep 20s && shutdown -h now
              } ; trap _the_end EXIT INT TERM
              export RUNS_ON_BOOSTRAP_PATH="${S3Bucket}.s3.${AWS::Region}.amazonaws.com/agents/${AppVersion}"
              export RUNS_ON_LOG_GROUP_NAME="${EC2InstanceLogGroup}"
              b=$(mktemp) ; time curl --connect-time 3 --max-time 10 --retry 5 -s "https://$RUNS_ON_BOOSTRAP_PATH/bootstrap.sh" -o $b ; bash -ex $b
            - AppVersion: !FindInMap [App, Image, Tag]

  EC2FleetLaunchTemplateLinuxLarge:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref SecurityGroup
        EbsOptimized: "true"
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 2
          InstanceMetadataTags: enabled
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: !Ref RunnerLargeDiskSize
              VolumeType: gp3
              Throughput: !Ref RunnerLargeVolumeThroughput
              Iops: 4000
              DeleteOnTermination: true
        InstanceInitiatedShutdownBehavior: "terminate"
        Monitoring:
          !If
            - ECInstanceDetailedMonitoringEnabled
            - Enabled: true
            - Ref: AWS::NoValue
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash -e
              _the_end() {
                echo "Going to shut down in a few seconds..." && sleep 20s && shutdown -h now
              } ; trap _the_end EXIT INT TERM
              export RUNS_ON_BOOSTRAP_PATH="${S3Bucket}.s3.${AWS::Region}.amazonaws.com/agents/${AppVersion}"
              export RUNS_ON_LOG_GROUP_NAME="${EC2InstanceLogGroup}"
              b=$(mktemp) ; time curl --connect-time 3 --max-time 10 --retry 5 -s "https://$RUNS_ON_BOOSTRAP_PATH/bootstrap.sh" -o $b ; bash -ex $b
            - AppVersion: !FindInMap [App, Image, Tag]

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for SSH access
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - CidrIp:
            Fn::Sub: "${SSHCidrRange}"
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName
        - Key: "runs-on/purpose"
          Value: "config"

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowReadForAgentBinariesFromVpcEndpoint
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/agents/*"
            Condition:
              StringEquals:
                aws:SourceVpce: !Ref S3VpcEndpoint

  S3BucketCache:
    Type: AWS::S3::Bucket
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: ExpireRunnerConfig
            Prefix: runners/
            Status: Enabled
            ExpirationInDays: 1
          - Id: ExpireCache
            Prefix: cache/
            Status: Enabled
            ExpirationInDays: 10
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName
        - Key: "runs-on/purpose"
          Value: "cache"

  EC2InstanceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        # !If [CustomPolicyProvided, [!Ref EC2InstanceCustomPolicy, "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"], ["arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"]]
        !If [CustomPolicyProvided, [!Ref EC2InstanceCustomPolicy], []]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TagInstance
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                Resource: "*"
                Condition:
                  StringEquals:
                    "aws:ARN": "${ec2:SourceInstanceARN}"
        - PolicyName: SendLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:PutLogEvents"
                  - "logs:PutRetentionPolicy"
                  - "logs:DescribeLogStreams"
                  - "logs:DescribeLogGroups"
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                Resource: 
                - !Sub "${EC2InstanceLogGroup.Arn}"
                - !Sub "${EC2InstanceLogGroup.Arn}:*"
        - PolicyName: SendMetrics
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
                Condition:
                  StringEquals:
                    cloudwatch:namespace: "RunsOn/Runners"
        - PolicyName: EC2AccessS3BucketPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                Resource:
                  - !Sub "arn:aws:s3:::${S3BucketCache}"
                  - !Sub "arn:aws:s3:::${S3BucketCache}/cache/*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Join
                    - ""
                    - [
                        !Sub "arn:aws:s3:::${S3BucketCache}/runners/",
                        "${aws:userid}/*",
                      ]
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  RunsOnServiceAutoScalingConfiguration:
    Type: AWS::AppRunner::AutoScalingConfiguration
    Properties:
      MaxConcurrency: 100
      MaxSize: 25
      MinSize: 1
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  RunsOnService:
    Type: AWS::AppRunner::Service
    Properties:
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName
      InstanceConfiguration:
        Cpu: !Ref AppCPU
        Memory: !Ref AppMemory
        InstanceRoleArn: !GetAtt RunsOnServiceRole.Arn
      NetworkConfiguration:
        EgressConfiguration:
          EgressType: DEFAULT
        IngressConfiguration:
          IsPubliclyAccessible: true
        IpAddressType: IPV4
      HealthCheckConfiguration:
        Path: /ping
        Protocol: HTTP
        HealthyThreshold: 1
        UnhealthyThreshold: 10
        Interval: 3
      AutoScalingConfigurationArn: !Ref RunsOnServiceAutoScalingConfiguration
      SourceConfiguration:
        ImageRepository:
          ImageConfiguration:
            Port: 8080
            RuntimeEnvironmentVariables:
              - Name: RUNS_ON_STACK_NAME
                Value: !Ref AWS::StackName
              - Name: RUNS_ON_ORG
                Value: !Ref GithubOrganization
              - Name: RUNS_ON_APP_VERSION
                Value: !FindInMap [App, Image, Tag]
              - Name: RUNS_ON_LICENSE_KEY
                Value: !Ref LicenseKey
              - Name: RUNS_ON_BUCKET_CONFIG
                Value: !Ref S3Bucket
              - Name: RUNS_ON_BUCKET_CACHE
                Value: !Ref S3BucketCache
              - Name: RUNS_ON_SECURITY_GROUP_ID
                Value: !Ref SecurityGroup
              - Name: RUNS_ON_INSTANCE_PROFILE_ARN
                Value: !GetAtt EC2InstanceProfile.Arn
              - Name: RUNS_ON_INSTANCE_ROLE_NAME
                Value: !Ref EC2InstanceRole
              - Name: RUNS_ON_TOPIC_ARN
                Value: !Ref AlertTopic
              - Name: RUNS_ON_REGION
                Value: !Ref AWS::Region
              - Name: RUNS_ON_APP_EC2_QUEUE_SIZE
                Value: !Ref AppEc2QueueSize
              - Name: RUNS_ON_PUBLIC_SUBNET1
                Value: !Ref PublicSubnet1
              - Name: RUNS_ON_PUBLIC_SUBNET2
                Value: !Ref PublicSubnet2
              - Name: RUNS_ON_PUBLIC_SUBNET3
                Value: !Ref PublicSubnet3
              - Name: RUNS_ON_PRIVATE_SUBNET1
                Value: !Ref PrivateSubnet1
              - Name: RUNS_ON_PRIVATE_SUBNET2
                Value: !Ref PrivateSubnet2
              - Name: RUNS_ON_PRIVATE_SUBNET3
                Value: !Ref PrivateSubnet3
              - Name: RUNS_ON_PRIVATE
                Value: !Ref Private
              - Name: RUNS_ON_DEFAULT_ADMINS
                Value: !Ref DefaultAdmins
              - Name: RUNS_ON_LAUNCH_TEMPLATE_LINUX_DEFAULT
                Value: !Ref EC2FleetLaunchTemplateLinuxDefault
              - Name: RUNS_ON_LAUNCH_TEMPLATE_LINUX_LARGE
                Value: !Ref EC2FleetLaunchTemplateLinuxLarge
              - Name: RUNS_ON_RUNNER_DEFAULT_DISK_SIZE
                Value: !Ref RunnerDefaultDiskSize
              - Name: RUNS_ON_RUNNER_LARGE_DISK_SIZE
                Value: !Ref RunnerLargeDiskSize
              - Name: RUNS_ON_QUEUE
                Value: !Ref RunsOnQueue
              - Name: RUNS_ON_COST_REPORTS_ENABLED
                Value: !Ref CostReportsEnabled
          ImageIdentifier: !Sub
            - "public.ecr.aws/c5h5o9k1/runs-on/runs-on:${AppVersion}"
            - AppVersion: !FindInMap [App, Image, Tag]
          ImageRepositoryType: ECR_PUBLIC

  RunsOnServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - tasks.apprunner.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AppRunnerEC2Permissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeImages
                  - ec2:DescribeInstances
                  - ce:GetCostAndUsage
                  - ce:UpdateCostAllocationTagsStatus
                  - iam:CreateServiceLinkedRole
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricData
                  - cloudwatch:DescribeAlarms
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: !Ref AWS::StackId
              - Effect: Allow
                Action:
                  - ec2:CreateFleet
                  - ec2:DeleteFleet
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:RunInstances
                Resource:
                  - !Sub "arn:aws:ec2:${AWS::Region}::image/*"
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - iam:GetRole
                Resource: !GetAtt EC2InstanceRole.Arn
              - Effect: Allow
                Action:
                  - ec2:TerminateInstances
                Resource: "arn:aws:ec2:*:*:instance/*"
                Condition:
                  StringEquals:
                    "aws:ResourceTag/stack": !Ref AWS::StackName
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - Fn::Sub: arn:aws:s3:::${S3Bucket}
                  - Fn::Sub: arn:aws:s3:::${S3Bucket}/*
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - Fn::Sub: arn:aws:s3:::${S3BucketCache}
                  - Fn::Sub: arn:aws:s3:::${S3BucketCache}/runners/*
                  - Fn::Sub: arn:aws:s3:::${S3BucketCache}/agents/*
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref AlertTopic
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt RunsOnQueue.Arn

  MinutesPerDayAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub "RunsOn daily usage exceeds ${AppAlarmDailyMinutes} minutes"
      Namespace: RunsOn
      MetricName: minutesNoDimension
      Statistic: Sum
      Period: 86400 # 24h
      EvaluationPeriods: 1
      Threshold: !Ref AppAlarmDailyMinutes
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      OKActions:
        - !Ref AlertTopic

  RunsOnQueueDeadLetter:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      MessageRetentionPeriod: 259200 # 3 days

  RunsOnQueueDeadLetterPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref RunsOnQueueDeadLetter
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "sqs:SendMessage"
            Resource: !GetAtt RunsOnQueueDeadLetter.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref RunsOnQueue

  RunsOnQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      MessageRetentionPeriod: 86400 # 24h
      ReceiveMessageWaitTimeSeconds: 10
      VisibilityTimeout: 120 # AWS recommends 6 times the max processing time
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt RunsOnQueueDeadLetter.Arn
        maxReceiveCount: 5
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName

  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: "stack"
          Value: !Ref AWS::StackName
      DisplayName: RunsOn Alerts

  AlertTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref AlertTopic
      Endpoint: !If [EmailProvided, !Ref EmailAddress, ""]

  AlertTopicSubscriptionHttps:
    Condition: AlertTopicSubscriptionHttpsProvided
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: https
      TopicArn: !Ref AlertTopic
      Endpoint: !Ref AlertTopicSubscriptionHttpsEndpoint

Outputs:
  RunsOnEntryPoint:
    Description: Entrypoint for the RunsOn service
    Value: !GetAtt RunsOnService.ServiceUrl
  RunsOnService:
    Description: Link to the AppRunner service in AWS console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/apprunner/home?region=${AWS::Region}#/services/dashboard?service_arn=${RunsOnService}"
  RunsOnOrg:
    Description: GitHub organization or personal account
    Value: !Ref GithubOrganization
  RunsOnLicenseKey:
    Description: License key
    Value: !Ref LicenseKey
  RunsOnRegion:
    Description: AWS region
    Value: !Ref AWS::Region
  RunsOnPublicSubnet1:
    Description: Public subnet 1
    Value: !Ref PublicSubnet1
  RunsOnPublicSubnet2:
    Description: Public subnet 2
    Value: !Ref PublicSubnet2
  RunsOnPublicSubnet3:
    Description: Public subnet 3
    Value: !Ref PublicSubnet3
  RunsOnPrivateSubnet1:
    Description: Private subnet 1
    Value: !Ref PrivateSubnet1
  RunsOnPrivateSubnet2:
    Description: Private subnet 2
    Value: !Ref PrivateSubnet2
  RunsOnPrivateSubnet3:
    Description: Private subnet 3
    Value: !Ref PrivateSubnet3
  RunsOnPrivate:
    Description: Private subnets enabled
    Value: !Ref Private
  RunsOnRunnerDefaultDiskSize:
    Description: Default disk size for runners
    Value: !Ref RunnerDefaultDiskSize
  RunsOnRunnerLargeDiskSize:
    Description: Large disk size for runners
    Value: !Ref RunnerLargeDiskSize
  RunsOnInstanceProfileArn:
    Description: Runner instance profile ARN
    Value: !GetAtt EC2InstanceProfile.Arn
  RunsOnInstanceProfileName:
    Description: Runner instance profile Name
    Value: !Ref EC2InstanceProfile
  RunsOnInstanceRoleName:
    Description: Runner instance role Name
    Value: !Ref EC2InstanceRole
  RunsOnSecurityGroupId:
    Description: Security group for runners
    Value: !Ref SecurityGroup
  RunsOnBucketConfig:
    Description: S3 bucket for storing configuration
    Value: !Ref S3Bucket
  RunsOnBucketCache:
    Description: S3 bucket for storing cache artefacts
    Value: !Ref S3BucketCache
  RunsOnTopicArn:
    Description: SNS Topic where email alerts and reports are sent
    Value: !Ref AlertTopic
  RunsOnDefaultAdmins:
    Description: Default GitHub usernames with SSH access to the runners
    Value: !Ref DefaultAdmins
  RunsOnLaunchTemplateLinuxDefault:
    Description: Default Linux launch template for the RunsOn service
    Value: !Ref EC2FleetLaunchTemplateLinuxDefault
  RunsOnLaunchTemplateLinuxLarge:
    Description: Large Linux launch template for the RunsOn service
    Value: !Ref EC2FleetLaunchTemplateLinuxLarge
  RunsOnAppVersion:
    Description: Version of the RunsOn service
    Value: !FindInMap [App, Image, Tag]
  RunsOnStackName:
    Description: Name of the stack
    Value: !Ref AWS::StackName
  RunsOnAppEc2QueueSize:
    Description: Size of the EC2 queue
    Value: !Ref AppEc2QueueSize
  RunsOnQueue:
    Description: SQS queue for the RunsOn service
    Value: !Ref RunsOnQueue
  RunsOnCostReportsEnabled:
    Description: Enable or disable cost reports sent by email
    Value: !Ref CostReportsEnabled
