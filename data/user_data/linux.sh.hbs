#!/bin/bash
set -e
set -o pipefail

{{!-- # Note: this template must be valid for all linux variants (ubuntu, centos, etc), and all supported architectures (x64, arm64, etc) --}}

RUNS_ON_ENV_FILE="/opt/runs-on/env"
mkdir -p /opt/runs-on /opt/runs-on/hooks

if [ "$(uname -i)" = "aarch64" ]; then
  echo "Detected arm64 architecture"
  RUNS_ON_AGENT_ARCH="arm64"
else
  echo "Detected x64 architecture"
  RUNS_ON_AGENT_ARCH="x64"
fi

# automatically shut down instance after job exits
_the_end() {
	echo "Going to shut down in a few seconds..."
  sleep 1m
  shutdown -h now
}
trap _the_end EXIT INT TERM

_add_to_env() {
  echo "$1=$2" >> $RUNS_ON_ENV_FILE
}

RUNS_ON_AGENT_JIT_CONFIG="{{{runnerJitConfig}}}"
RUNS_ON_AGENT_DIR="$RUNS_ON_AGENT_DIR"
RUNS_ON_AGENT_VERSION="2.313.0"
RUNS_ON_AGENT_FULL_TIMEOUT=12h
RUNS_ON_AGENT_WAIT_TIMEOUT=20m
{{!-- # https://github.com/actions/actions-runner-controller/blob/master/docs/adrs/2022-10-17-runner-image.md --}}
RUNS_ON_AGENT_USER="runner"
RUNS_ON_RUNNER_NAME="{{{ runnerName }}}"
RUNS_ON_AGENT_DIR="/home/$RUNS_ON_AGENT_USER"
RUNS_ON_LAUNCHED_AT={{{ launchedAt }}}
RUNS_ON_DEBUG={{{ debug }}}

_add_to_env "RUNS_ON_AGENT_ARCH" "$RUNS_ON_AGENT_ARCH"
_add_to_env "RUNS_ON_RUNNER_NAME" "$RUNS_ON_RUNNER_NAME"
_add_to_env "RUNS_ON_AGENT_USER" "$RUNS_ON_AGENT_USER"
_add_to_env "RUNS_ON_S3_BUCKET_CACHE" "{{{ s3BucketCache }}}"
_add_to_env "RUNS_ON_AWS_REGION" "{{{ awsRegion }}}"

debug_hook="/opt/runs-on/hooks/debug.sh"
debug_lock="/opt/runs-on/hooks/debug.lock"
pre_hook="/opt/runs-on/pre.sh" 

cat > $debug_hook <<EOF
#!/bin/bash -e
while test -f $debug_lock ; do
  echo "Waiting for debug lock at $debug_lock to be removed..."
  sleep 30
done
echo "Debug lock removed. Continuing..."
EOF
chmod a+x $debug_hook

_add_to_env "ACTIONS_RUNNER_HOOK_JOB_STARTED" "$pre_hook"

cat > $pre_hook <<EOF
#!/bin/bash -ex
cat $RUNS_ON_ENV_FILE >> \$GITHUB_ENV
EOF
chmod a+x $pre_hook

if [ "$RUNS_ON_DEBUG" = "true" ]; then
  touch $debug_lock
  echo "$debug_hook" >> $pre_hook
fi

# expose image env vars (if any)
echo ". /etc/environment" >> /etc/profile
# expose runs-on env vars
echo ". $RUNS_ON_ENV_FILE" >> /etc/profile

_run_with_timestamp() {
  "$@"
  local status=$?
  local end=$(date -u +"%Y-%m-%dT%H:%M:%S%z")
  local diff=$(($(date -u -d "$end" +"%s") - $(date -u -d "$RUNS_ON_LAUNCHED_AT" +"%s")))
  echo "[$end] ${@/_/} (+${diff})" >> /tmp/runs-on-timings.log
  return $status
}

_started() {
  echo "Started"
}

_ready() {
  echo "Ready"
}

echo "[$RUNS_ON_LAUNCHED_AT] launched" >> /tmp/runs-on-timings.log
_run_with_timestamp _started

_setup_watchdogs() {
  echo "Installing watchdogs..."
  sleep $RUNS_ON_AGENT_WAIT_TIMEOUT && \
    if ! ( grep "ProcessChannel" $RUNS_ON_AGENT_DIR/_diag/*.log | grep "Receiving message" ) ; then echo "Wait timeout reached. Shutting down instance." && _the_end ; fi &

  sleep $RUNS_ON_AGENT_FULL_TIMEOUT && \
    echo "Full timeout reached. Shutting down instance." && _the_end &
}
_run_with_timestamp _setup_watchdogs

_store_ssh_keys() {
  echo "Storing SSH keys..."
  mkdir -p /root/runs-on/
  RUNS_ON_SSH_KEYS_FILE=/root/runs-on/authorized_keys
  # TODO: store those in S3 bucket instead?
  curl -Ls https://github.com/{{ join sshGithubUsernames delimiter=',' wrap='{}' }}.keys > "$RUNS_ON_SSH_KEYS_FILE"
}
_run_with_timestamp _store_ssh_keys

_setup_runner_user() {
  echo "Setting up runner user..."
  {{!-- # note: --disabled-password --gecos "" are not supported on all distros, so removing them --}}
  if adduser --help | grep disabled-password &>/dev/null ; then
    adduser --shell /bin/bash --uid 1001 --disabled-password --gecos "" "$RUNS_ON_AGENT_USER"
  else
    adduser --shell /bin/bash --uid 1001 "$RUNS_ON_AGENT_USER"
  fi
  {{!-- # note: sudo group not always present on systems (e.g. amazon linux) --}}
  groupadd --force sudo
  usermod -aG sudo runner
  echo "%sudo   ALL=(ALL:ALL) NOPASSWD:ALL" > /etc/sudoers
  echo "Defaults env_keep += \"DEBIAN_FRONTEND\"" >> /etc/sudoers
}
id "$RUNS_ON_AGENT_USER" || _run_with_timestamp _setup_runner_user

_setup_ssh() {
  local homeUser="$RUNS_ON_AGENT_USER"
  local homeDir="/home/$homeUser"
  echo "Setting up SSH access..."
  mkdir -p "$homeDir"/.ssh
  chown "$homeUser":"$homeUser" "$homeDir"
  cat "$RUNS_ON_SSH_KEYS_FILE" >> "$homeDir"/.ssh/authorized_keys
  chown -R "$homeUser":"$homeUser" "$homeDir"/.ssh
  chmod 700 "$homeDir"/.ssh && chmod 600 "$homeDir"/.ssh/authorized_keys
}
_run_with_timestamp _setup_ssh || true

_install_jq() {
  if ! jq --version &>/dev/null ; then
    local arch="$RUNS_ON_AGENT_ARCH"
    if [ "$arch" = "x64" ]; then arch="amd64" ; fi
    curl -Ls https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-$arch -o /usr/local/bin/jq
    chmod a+x /usr/local/bin/jq
  fi
}

{{!-- # fetch instance identity, e.g. --}}
{{!-- {
  "accountId" : "756351362063",
  "architecture" : "arm64",
  "availabilityZone" : "us-east-1a",
  "billingProducts" : null,
  "devpayProductCodes" : null,
  "marketplaceProductCodes" : null,
  "imageId" : "ami-0501dbccac6946967",
  "instanceId" : "i-082d635d2062e57b5",
  "instanceType" : "m7g.large",
  "kernelId" : null,
  "pendingTime" : "2024-02-14T09:38:25Z",
  "privateIp" : "10.0.15.78",
  "ramdiskId" : null,
  "region" : "us-east-1",
  "version" : "2017-09-30"
} --}}
_fetch_instance_details() {
  if _install_jq ; then
    EC2_TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 600")
    RUNS_ON_RUNNER_IP="$(curl -H "X-aws-ec2-metadata-token: $EC2_TOKEN" -s http://169.254.169.254/latest/meta-data/public-ipv4)"
    _add_to_env "RUNS_ON_RUNNER_IP" "$RUNS_ON_RUNNER_IP"
    curl -H "X-aws-ec2-metadata-token: $EC2_TOKEN" -s http://169.254.169.254/latest/dynamic/instance-identity/document -o /opt/runs-on/instance-identity.json
    EC2_INSTANCE_LIFE_CYCLE=$(curl -s -H "X-aws-ec2-metadata-token: $EC2_TOKEN" http://169.254.169.254/latest/meta-data/instance-life-cycle)
    echo "Instance lifecycle: $EC2_INSTANCE_LIFE_CYCLE" >> /opt/runs-on/instance-details.txt
    jq -r '. | ("Instance type: " + .instanceType + "\nInstance ID: " + .instanceId + "\nAMI: " + .imageId + "\nArchitecture: " + .architecture + "\nAvailabilityZone: " + .availabilityZone)' /opt/runs-on/instance-identity.json >> /opt/runs-on/instance-details.txt
  fi
}
_run_with_timestamp _fetch_instance_details || true

_resize_disk() {
  if df -hT | grep -q /dev/nvme0n1p1 ; then
    echo "Detected NVMe disk. Attempting to increase disk size to maximum..."
    growpart /dev/nvme0n1 1 && resize2fs /dev/nvme0n1p1
  fi
}
_run_with_timestamp _resize_disk || true

_setup_agent() {
  if ! test -f "$RUNS_ON_AGENT_DIR/run.sh" ; then
    echo "Agent not found. Installing..."
    mkdir -p "$RUNS_ON_AGENT_DIR"
    time curl -o - \
      -L "https://github.com/actions/runner/releases/download/v$RUNS_ON_AGENT_VERSION/actions-runner-linux-$RUNS_ON_AGENT_ARCH-$RUNS_ON_AGENT_VERSION.tar.gz" \
      | tar xzf - -C $RUNS_ON_AGENT_DIR
  else
    echo "Agent found. Skipping install..."
  fi

  chown -R $RUNS_ON_AGENT_USER:$RUNS_ON_AGENT_USER $RUNS_ON_AGENT_DIR
  if grep -E '^docker:' /etc/group &>/dev/null ; then
    echo "Adding $RUNS_ON_AGENT_USER to docker group..."
    usermod -aG docker $RUNS_ON_AGENT_USER || true
  fi

  {{!-- # avoids issue with missing libicu for runner on some systems (e.g. amazon linux 2) --}}
  _add_to_env "DOTNET_SYSTEM_GLOBALIZATION_INVARIANT" "1"

  ln -sf $RUNS_ON_ENV_FILE $RUNS_ON_AGENT_DIR/.env
}
_run_with_timestamp _setup_agent

_setup_preinstall() {
  echo "Storing preinstall scripts..."
  mkdir -p /root/runs-on/preinstall
  {{#preinstallScripts}}
  echo "{{{.}}}" | base64 -d > /root/runs-on/preinstall/{{@index}}-script.sh
  chmod a+x /root/runs-on/preinstall/{{@index}}-script.sh
  {{/preinstallScripts}}

  find /root/runs-on/preinstall -type f -print0 -name "*.sh" | sort --zero-terminated | xargs -r bash
}
_run_with_timestamp _setup_preinstall || true

_setup_infos() {
  echo "Storing infos..."
  mkdir -p "$RUNS_ON_AGENT_DIR"
  local timings=$(cat /tmp/runs-on-timings.log)
  local instance_details=$(cat /opt/runs-on/instance-details.txt)
  local ami_details=""
  if test -s /imagegeneration/imagedata.json ; then
    ami_details="$(cat /imagegeneration/imagedata.json | sed 's/[][]//g'),"
  fi
  cat > "$RUNS_ON_AGENT_DIR/.setup_info" <<EOF
[
  $ami_details
  {
    "group": "Runner Instance",
    "detail": "SSH: $RUNS_ON_AGENT_USER@$RUNS_ON_RUNNER_IP\nName: $RUNS_ON_RUNNER_NAME\n$instance_details"
  },
  {
    "group": "Timings",
    "detail": "${timings}"
  }
]
EOF
}

_run_with_timestamp _ready

_setup_infos || true

echo "Launching agent..."
su - $RUNS_ON_AGENT_USER -c "cd $RUNS_ON_AGENT_DIR  && ./run.sh --jitconfig $RUNS_ON_AGENT_JIT_CONFIG"